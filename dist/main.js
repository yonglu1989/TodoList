(()=>{"use strict";var __webpack_modules__={138:()=>{eval('\nclass taskItem {\n    constructor(title, description, dueDate, priority) {\n        this.title = title,\n        this.description = description;\n        this.dueDate = dueDate;\n        this.priority = priority;\n    }\n\n    static compare(a, b) {\n        if (a.priority > b.priority) {\n            return 1;\n        }\n        else if (b.priority > a.priority) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    update(newtitle, newdesc, newdate, newpriority) {\n        this.title = newtitle;\n        this.description = newdesc;\n        this.dueDate = newdate;\n        this.priority = newpriority;\n    }\n\n}\n\n\nclass ProjectList {\n    constructor(name) {\n        this.taskArray = [];\n        this.name = name;\n    }\n\n    addTask = (title, description, dueDate, priority) => {\n        this.taskArray.push(new taskItem(title, description, dueDate, priority));\n    }\n\n    getName() {\n        return this.name;\n    }\n}\n\nclass Model {\n    constructor() {\n        this.listofProjects = [];\n\n        //initial projects for testing, remove later\n        const defaultproj = new ProjectList("DefaultList");\n        defaultproj.addTask("def", "def", "def", 1);\n        this.listofProjects.push(defaultproj);\n        // console.log(this.listofProjects);\n\n    }\n\n    bindProjectListChanged(callback) {\n        this.onProjectsChanged = callback;\n    }\n\n    addProject(name) {\n        let bnewName = true;\n        for(let i = 0; i < this.listofProjects.length; i++) {\n            if (name == this.listofProjects[i].name) {\n                bnewName = false;\n            }\n        }\n        if (bnewName) {\n            let newProject = new ProjectList(name);\n            this.listofProjects.push(newProject);\n            this.onProjectsChanged(this.names);\n        }\n    }\n\n    get names() {\n        let projectnames = [];\n        for(let i = 0; i < this.listofProjects.length; i++) {\n            projectnames.push(this.listofProjects[i].name);\n        }\n        return projectnames;\n    }\n}\n\nclass View {\n    constructor() {\n        this.body = document.body;\n        this.sideMenu = document.createElement("div");\n        // projectsContainer will contain user created projects.\n        this.projectsContainer = document.createElement("div");\n        this.projectsContainer.id = "projectsContainer";\n\n        // Projects: submit and cancel button\n        this.addProjectSubmit = document.createElement("div");\n        this.addProjectCancel = document.createElement("div");\n        this.addProjectSubmit.textContent = "Submit";\n        this.addProjectCancel.textContent = "Cancel";\n        this.addProjectSubmit.id = "addProjectSubmit";\n        this.addProjectCancel.id = "addProjectCancel";\n        \n        this.tasksListingTitle = document.createElement("h1");\n        this.tasksListingTitle.textContent = "Today";\n\n        this.tasksContainer = document.createElement("div");\n        this.tasks = document.createElement("div");\n        this.tasks.id = "tasks";\n\n        this.generateStaticElements();\n        this.initializeDynamicElements();\n    }\n\n    addGlobalEventListener(type, selector, callback) {\n        document.addEventListener(type, e => {\n            if(e.target.matches(selector)) callback(e);\n        });\n    }\n\n    generateStaticElements() {\n        // Header\n        const heading = document.createElement("header");\n        const headingText = document.createElement("h1");\n        headingText.textContent = "TodoList";\n        heading.classList.add("heading");\n        heading.append(headingText);\n        this.body.appendChild(heading);\n\n        // Main container: includes this.sideMenu and tasks.\n        const mainContainer = document.createElement("div");\n\n        mainContainer.classList.add("maincontainer");\n        this.sideMenu.classList.add("sideMenu");\n        this.tasksContainer.classList.add("tasksContainer");\n\n        // Side Menu Items: Today, This Week.\n        const today = document.createElement("div");\n        today.textContent = "Today";\n        today.id = "today";\n\n        const week = document.createElement("div");\n        week.textContent = "Week";\n        week.id = "week";\n\n        const todayWeekContainer = document.createElement("div");\n        todayWeekContainer.classList.add("todayWeekContainer");\n        todayWeekContainer.appendChild(today);\n        todayWeekContainer.appendChild(week);\n        this.sideMenu.appendChild(todayWeekContainer);\n\n        // Side Menu Items: Project\n        const project = document.createElement("div");\n        project.textContent = "Projects";\n        project.id = "project";\n        this.sideMenu.appendChild(project);\n\n        // Tasks\n        this.tasksContainer.append(this.tasksListingTitle, this.tasks);\n\n        \n        // Appending this.sideMenu and tasks into maincontainer. maincontainer appended into body.\n        mainContainer.appendChild(this.sideMenu);\n        mainContainer.appendChild(this.tasksContainer);\n        this.body.appendChild(mainContainer);\n    }\n\n    initializeDynamicElements() {\n\n        // Add Project form\n        const addProjectForm = document.createElement("form");\n        addProjectForm.id = "addProjectForm";\n\n        const addProjectInput = document.createElement("input");\n        addProjectInput.type = "text";\n        addProjectInput.placeholder = "Project Name";\n        addProjectInput.id = "addProjectInput";\n\n        const addCancelContainer = document.createElement("div");\n        addCancelContainer.classList.add("addCancelContainer");\n\n        addCancelContainer.append(this.addProjectSubmit, this.addProjectCancel);\n        addProjectForm.append(addProjectInput, addCancelContainer);\n        \n        // Submit button event listener: add project to projectsContainer\n\n        // addProjectsButton\n        this.addProjectButton = document.createElement("div");\n        this.addProjectButton.id = "addProjectButton";\n        this.addProjectButton.textContent = "Add Project";\n        this.addProjectButton.addEventListener(\'click\', () => {\n            \n        });\n\n        this.sideMenu.append(this.projectsContainer, this.addProjectButton, addProjectForm);\n    }\n\n\n\n    displayProjects(projects) {\n        // empty out current projects container.\n        while(this.projectsContainer.firstChild != null) {\n            this.projectsContainer.removeChild(this.projectsContainer.firstChild);\n        }\n\n        //populate with updated projects list.\n        for(let i = 0; i < projects.length; i++) {\n            const newProject = document.createElement("div");\n            newProject.innerText = projects[i];\n            newProject.classList.add("project");\n            // console.log(projects[i].taskArray);\n            // newProject.addEventListener(\'click\', (e)=> {\n            //     let projtasks = projects[i].taskArray;\n            //     this.displayTasks(projtasks);\n            // });\n            this.projectsContainer.append(newProject);\n        }\n    }\n\n    displayTasks(tasks) {\n        while(this.tasks.firstChild != null) {\n            this.tasks.removeChild(this.tasks.firstChild);\n        }\n\n        for(let i = 0; i < tasks.length; i++) {\n            const task = document.createElement("task");\n            task.classList.add("task");\n            task.innerHTML = tasks[i].title;\n            this.tasks.append(task);\n        }\n    }\n\n    bindAddNewProject(handle) {\n        this.addProjectSubmit.addEventListener(\'click\', () => {\n            const projectName = document.querySelector("#addProjectInput").value;\n            if (projectName < 1) {\n                alert("Please enter a project name.");\n            }\n            else {\n                handle(projectName);\n            }\n        });\n    }\n\n    bindDisplayTasks(handle) {\n        this.sideMenu.addEventListener(\'click\', event => {\n            console.log(event.target.innerText);\n            if(event.target.className === \'project\') {\n                handle(event.target.innerText);\n                this.tasksListingTitle.innerText = event.target.innerText;\n            }\n        });\n    }\n}\n\nclass Controller {\n    constructor(model, view) {\n        this.model = model;\n        this.view = view;\n\n        // console.log(this.model.names)\n        this.view.displayProjects(this.model.names);\n\n        // Handle bindings in View\n        this.view.bindAddNewProject(this.handleAddProject);\n        this.view.bindDisplayTasks(this.handleDisplayTasks);\n\n        // Callback binding in Model (ProjectList)\n        this.model.bindProjectListChanged(this.onProjectsListChanged);\n    }\n\n\n\n    onProjectsListChanged = (projects) => {\n        this.view.displayProjects(projects);\n    }\n\n    handleAddProject = (name) => {\n        this.model.addProject(name);\n    }\n\n    onTasksChanged = (tasks) => {\n        this.view.displayTasks(tasks);\n    }\n\n    handleDisplayTasks = (name) => {\n        let tasks = [];\n        for(let i = 0; i < this.model.listofProjects.length; i++) {\n            if(name === this.model.listofProjects[i].name) {\n                tasks = this.model.listofProjects[i].taskArray;\n            }\n        }\n        this.onTasksChanged(tasks);\n    };\n\n    handleAddTask = (project, desc) => {\n        \n    }\n}\n\n\nconst app = new Controller(new Model(), new View());\n\n\n\n//# sourceURL=webpack://todolist/./src/index.js?')}},__webpack_exports__={};__webpack_modules__[138]()})();